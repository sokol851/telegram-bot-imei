import asyncio
import os
from datetime import datetime

import django
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from decouple import config

from api.services import flow_get_info

# –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ –≤–∞—à–µ–º—É —Ñ–∞–π–ª—É –Ω–∞—Å—Ç—Ä–æ–µ–∫
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ Django
django.setup()

# –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥–µ–ª–∏
from api.models import WhitelistedUser

# –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–Ω–∞—á–µ–Ω–∏–π id_telegram
WITHE_LIST = list(WhitelistedUser.objects.values_list('telegram_id', flat=True))

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = config('TELEGRAM_TOKEN')

# –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()


@dp.message(Command(commands=['start']))
async def send_welcome(message: types.Message):
    """ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞ """
    if message.from_user.id in WITHE_LIST:
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! "
                             "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ IMEI –≤–∞—à–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ "
                             "–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.")
    else:
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")


@dp.message()
async def handle_imei(message: types.Message):
    """ –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É IMEI """
    if message.from_user.id not in WITHE_LIST:
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return

    imei = message.text.strip()
    if not is_valid_imei(imei):
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π IMEI. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, "
                             "–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    await message.answer("–ü—Ä–æ–≤–µ—Ä—è—é IMEI, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")

    check = flow_get_info(imei)
    if check != {'failure': '–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞'}:
        await message.answer(format_response(check['properties']))
    else:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ IMEI.")


def is_valid_imei(imei):
    """ –í–∞–ª–∏–¥–∞—Ü–∏—è IMEI –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º –õ—É–Ω–∞ """

    def luhn_checksum(num):
        def digits_of(n):
            return [int(d) for d in str(n)]

        digits = digits_of(num)
        odd_digits = digits[-1::-2]
        even_digits = digits[-2::-2]
        total = sum(odd_digits)
        for d in even_digits:
            total += sum(digits_of(d * 2))
        return total % 10

    try:
        imei = ''.join(filter(str.isdigit, imei))
        if len(imei) != 15:
            return False
        return luhn_checksum(imei) == 0
    except Exception:
        return False


def format_response(data):
    """ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞ """
    if 'error' in data:
        return f"–û—à–∏–±–∫–∞: {data['error']}"

    imei = data.get('imei', 'N/A')
    imei2 = data.get('imei2', 'N/A')
    device_name = data.get('deviceName', 'N/A')
    model_code = data.get('modelCode', 'N/A')
    serial = data.get('serial', 'N/A')
    unlock_number = data.get('unlockNumber', 'N/A')
    mi_activation_lock = data.get('miActivationLock', 'N/A')
    sku_number = data.get('skuNumber', 'N/A')
    purchase_country = data.get('purchaseCountry', 'N/A')
    warranty_status = data.get('warrantyStatus', 'N/A')

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç
    def format_date(timestamp):
        try:
            return datetime.fromtimestamp(int(timestamp)).strftime("%d.%m.%Y %H:%M:%S")
        except (ValueError, TypeError):
            return 'N/A'

    message = (
        f"üì± –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ IMEI\n\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {device_name}\n"
        f"–ú–æ–¥–µ–ª—å: {model_code}\n"
        f"IMEI1: {imei}\n"
        f"IMEI2: {imei2}\n"
        f"S/N: {serial}\n"
        f"–ù–æ–º–µ—Ä —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {unlock_number}\n"
        f"mi –∞–∫—Ç–∏–≤–∞—Ü–∏—è: {mi_activation_lock}\n"
        f"sku number: {sku_number}\n"
        f"–°—Ç—Ä–∞–Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞: {purchase_country}\n"
        f"–°—Ç–∞—Ç—É—Å –≥–∞—Ä–∞–Ω—Ç–∏–∏: {warranty_status}\n"
        f"–î–∞—Ç–∞ –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è: {format_date(data.get('productionDate'))}\n"
        f"–î–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {format_date(data.get('deliveryDate'))}\n"
        f"–î–∞—Ç–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {format_date(data.get('activationDate'))}\n"
    )
    return message


async def main():
    await dp.start_polling(bot, skip_updates=True)


if __name__ == '__main__':
    asyncio.run(main())
